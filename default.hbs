<!DOCTYPE html>
<html lang="{{@site.locale}}">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="HandheldFriendly" content="True" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css" integrity="sha256-mmgLkCYLUQbXn0B1SRqzHar6dCnv9oZFPEC1g1cwlkk=" crossorigin="anonymous" />
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css">
        <link rel="stylesheet" type="text/css" href="{{asset "built/main.css"}}" />
        <title>{{meta_title}}</title>
        {{ghost_head}}
    </head>
    <body class="{{body_class}} overflow-x-hidden overflow-y-scroll min-h-screen font-normal bg-white">
        <div class="flex flex-col">
            <header id="gh-head" class="gh-head">
                <nav class="gh-head-inner w-full max-w-screen-xl mx-auto my-0">
                    <div class="gh-head-brand">
                        <a class="gh-head-logo" href="{{@site.url}}">
                            {{#if @site.logo}}
                                <img src="{{@site.logo}}" alt="{{@site.title}}" />
                            {{else}}
                                {{@site.title}}
                            {{/if}}
                        </a>
                        <a class="gh-burger" role="button">
                            <div class="gh-burger-box">
                                <div class="gh-burger-inner"></div>
                            </div>
                        </a>
                    </div>
                    <div class="gh-head-menu">
                        {{navigation}}
                    </div>
                </nav>
            </header>

            <main class="flex flex-col flex-auto gh-canvas">
                {{{body}}}
                {{!-- All content gets inserted here, index.hbs, post.hbs, etc --}}
            </main>

            <footer class="gh-foot">
                <div class="gh-container">
                    <div class="gh-foot-menu">
                        {{navigation type="secondary"}}
                    </div>
                    <div class="gh-foot-meta">
                        Published with <a href="https://ghost.org" target="_blank" rel="noopener">Ghost</a>
                    </div>
                </div>
            </footer>
        </div>

        {{!-- <foot> --}}

        <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
        <script src="{{asset "js/bootstrap-pagination.js"}}"></script>
        <script src="https://cdn.jsdelivr.net/gh/gmfmi/searchinghost-easy@latest/dist/searchinghost-easy-backpack.js"></script>

        <script>
            window.ADVISORY = {
                SITE_URL: "{{@site.url}}",
                // Note: CONTENT_API_KEY is instance-dependent; this is the key for `beta.advisory.sg`.
                CONTENT_API_KEY: "3ecdb68993794bc0157e776e5d",
            };

            if (/^[a-z]+:\/\/localhost[:\/]/.test(ADVISORY.SITE_URL)) {
                // Replace this with a new key if testing on a local instance.
                ADVISORY.CONTENT_API_KEY = "";
            }

            new SearchinGhostEasy({ contentApiKey: ADVISORY.CONTENT_API_KEY });

            // Filter feature
            let primaryFilters = "";
            let internalFilters = "";
                        
            function getFilterOptions(target){
                // Retrieve select value from filter and manipulate the values for filtering
                let filterOptions = $(target).val();
                // Check if target is an internal tag filter
                let internalTag = $(target).hasClass('internal-tag');
                // Set respective prefix 
                let tagPrefix = internalTag ? ".tag-hash-" : ".tag-";
                // Initialise a new array for holding raw values to be written to localstorage
                let rawFilter = new Array();
                // Loop through each item in the filter
                $.each(filterOptions, function(index,value) {
                    // Push the raw value for localstorage
                    rawFilter.push(value);
                    filterOptions[index] = tagPrefix + slugRegex(value)
                })
                if (internalTag){
                    // Write values for internal tags
                    internalFilters = filterOptions;
                    // Write internal filters to localstorage for persistance across pages
                    localStorage.setItem('internalFilters', rawFilter.join("|"));
                } else {
                    // Write values for primary tags
                    primaryFilters = filterOptions;
                    // Write filters to localstorage for persistance across pages
                    localStorage.setItem('primaryFilters', rawFilter.join("|"));
                }
            }
            function slugRegex(value) {
                // ! Potentially breaking regex
                // Basic slug generator: replace whitespaces with dashes, then strip punctuation
                return value.replace(/\s+/g, '-').replace(/[.,'!?]/, '').toLowerCase();
            }
            function filterPosts(){
                // Get filter options for both filter categories
                getFilterOptions($('#primary-filter'));
                getFilterOptions($('#internal-filter'));
                let filters = [];
                if (primaryFilters.length >= 1 && internalFilters.length >= 1) {
                    // Combine filters for an AND relationship filter 
                    $.each(primaryFilters, function(indexP, valueP) {
                        $.each(internalFilters, function(indexI, valueI) {
                            filters.push(valueP + valueI);
                        });
                    });
                } else {
                    // Get filters
                    filters = primaryFilters.concat(internalFilters);
                }
                // Hide all posts by default
                $('.gh-postfeed').children().each(function() {
                    $(this).addClass('d-none');
                });
                if (filters.length > 0) {
                    // Show post if post meets the filter tags
                    $.each(filters, function(index, value) {
                        $('.gh-postfeed').children().each(function() {
                            if ($(this).is(value)) {
                                $(this).removeClass('d-none');
                            }
                        });
                    });
                }
            };
        
            function retrieveFiltersFromLS(){
                // Retrieve filters from local storage and set it to the respective select element (force refresh using change())
                if (localStorage.getItem('internalFilters') != null) {
                    let rawIntFilter = localStorage.getItem('internalFilters').split("|");
                    $('#internal-filter').val(rawIntFilter).change();
                } else {
                    // First load, select all by default
                    $("#internal-filter option").prop("selected", "selected");
                    $('#internal-filter').selectpicker('refresh');
                }
                if (localStorage.getItem('primaryFilters') != null) {
                    let rawPriFilter = localStorage.getItem('primaryFilters').split("|");
                    $('#primary-filter').val(rawPriFilter).change();
                } else {
                    // First load, select all by default
                    $("#primary-filter option").prop("selected", "selected");
                    $('#primary-filter').selectpicker('refresh');

                }
            }
            $(document).ready(function () {
                // On page load, set persisted filters via localstorage 
                retrieveFiltersFromLS();
                // Filter posts on active page
                filterPosts();
                // Listen to changes to both filters
                $('#primary-filter, #internal-filter').change(function(){
                    // Retrieve filter options on selection change
                    {{!-- getFilterOptions(this); --}}
                    // Filter 
                    filterPosts();
                })
                    // Mobile Menu Trigger
                $('.gh-burger').click(function () {
                    $('body').toggleClass('gh-head-open');
                });

                $('.clear-filter').click(function(event) {
                    $('.gh-postfeed').children().each(function() {
                        $(this).removeClass('d-none');
                    });
                });
                function createPagination() {
                    var url = window.location.href;
                    if(pages > 1) {
                        var paginationArr = pagination(page, pages);
                        var paginationItem;
                        var isCurrent = '';

                        for (var i = paginationArr.length - 1; i >= 0; i--) {
                        var pageNum = paginationArr[i];

                        if (pageNum === page) {
                                paginationItem = '<li class="page-item disabled"><a class="page-link">' + pageNum + '</a></li>';
                            } else if (typeof pageNum === 'number') {
                                var urlArray = url.split('/');
                                if(urlArray[urlArray.length - 3] === 'page') {
                                    url = url.replace(/\/page\/.*$/,'') + '/';
                                }
                                paginationItem = '<li class="page-item">' +
                                    '<a class=\"page-link\" href=\"' + url + 'page/' + pageNum + '\" aria-label=\"Page ' + pageNum + '\">'
                                    + pageNum + '</a>' +
                                    '</li>';
                            } else {
                                paginationItem = '<li class=\" page-item disabled\"><a class="page-link">&hellip;</a></li>';
                            }
                            $('.pagination-previous').after(paginationItem);
                        }
                    } else {
                        $('.pagination').css('display', 'none');
                    }
                }
                createPagination();

            });
        </script>
        {{#is "post"}}
            <script src="{{asset "built/toggledropdown.js"}}"></script>
        {{/is}}
        {{#is "home"}}
            <script src="https://unpkg.com/@tryghost/content-api@latest/umd/content-api.min.js"></script>
            <script src="{{asset "built/eventCardFetcher.js"}}"></script>
        {{/is}}
        {{ghost_foot}}
        {{!-- Outputs important scripts - should always be included before closing body tag --}}
    </body>
</html>
